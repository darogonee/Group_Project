[Server File|
	[redirect function|
    	[Parameters: link] -> 
        [opens the redicrect.html] -> 
        [replaces the url string with Parameter - link] ->
        [runs js and load the new file useing the link] -> [<end>]
    ]
    
    [query function|
    	[<choice>if "?" not in self.path] -> 
        	True[sets: query_string = self.path] ->
        	[query_string = split the path at "?" and "&"] ->
        	[splits the first part of the query_string at "="] ->
        	[set name to = the first part] ->
        	[set value to = the second part] ->
        	[returns name and value in a dictionary] -> [<end>]
        
        [if "?" not in self.path] -> 
        	False[Retruns a empty dictionary] -> [<end>]
    ]
    
    [get_cookie function|
    	[<choice>if self.headers.get("Cookie") is None:] -> 
        	True[Retruns a empty dictionary]  -> [<end>]
        
        [if self.headers.get("Cookie") is None:] ->  
        	False[gets the cookie from the headers] ->
        	[splits the cookie into two parts] ->
            [returns name and value in a dictionary] -> [<end>]
    ]
    
    [set_cookie function|
    	[Paramters: user] ->
    	[sets user_uuid to = uuid.uuid4().hex] ->
        [makes veriable called expire that expires in 30 days] ->
        [sends a cookie to the use with the uuid and expire veriables] -> [<end>]
    ]
    
    [get_username function|
    	[cookie veriable is set using the get_cookie function] ->
        [<choice>then checks if cookie'user' in uuid2user] ->
        	True[returns uuid2user'cookie''user'] -> [<end>]
        
        [then checks if cookie'user' in uuid2user] ->
        	False[calls the redirect function and pass through "/signin"] -> [<end>]
        
    ] -> [get_cookie function]
    [get_username function] -> [redirect function]
    
    [get_user_data function|
    	[set user veriable to = get_username function] ->
        [user_data_file is set to "/user_data/{user veriable}.json] ->
        [opens the user_data_file] ->
        [sets the veriable data to the file that was loaded] -> [<end>]
    ] -> [get_username function]
    
    [do_GET function|
    	[<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/activities"[sets user it = the output of ] ->
            [opens the "web/html/activities.html" file and sets activities_file] ->
            [opens the "web/html/activity-template.html" file and sets activity_file] ->
            [sets activity_data to python.Api.get_user_activites(user)] ->
            [uses activity data to replace templates in the activity file] ->
            [writes activity_file to the activities_file] -> [<end>]
        
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/logout"[removes the user uuid and cookie] -> [<end>]
   		
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/refresh"[sets user veriable to the output of get_username function] ->
            [removes the users cach to reload the page] ->
            [calls the redirect funtion and pass through "/activities"]-> [<end>]
        
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/oauth"[sets the veriable cooke to the output of the get_cookie function] ->
            
            [<choice>if "user" not in cookie] ->
            	True[call the redirect funtion pass though "/signin"] -> [<end>]
                
            [<choice>if "user" not in cookie] ->
            	False[sets user to the output of get_username function] ->
                [calls the python.Api.save function and authorizes the user strava acount] ->
                [calls the redirect function and pass though "/"] -> [<end>]
        
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/main.css"[opens the "web/css/main.css" file and sets file veriable] ->
            [loads the "main.css" file and formates the html] -> [<end>]
            
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/main.js"[opens the "web/js/main.js" file and sets file veriable] ->
            [loads the "main.js" file and runs some java script coded] -> [<end>]
        
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/signin"[opens the "web/html/signin.html" file] ->
            [loads the login_pages html]
        
        [<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/action_signin"[sets value to the query function output] ->
            [sets password to password_hash function output] ->
            [sets password_rentry to password_hash function output] ->
            [opens data/passwords.json file] ->
            [sets data to the data/passwords] ->
            
            [<choice>username in data] ->
            	True[<choice>password == data"username"] ->
                	True[sets user to = the out put of get_username function] ->
                	[opens "web/html/redirect.html" file] -> [<end>]
                False[<choice>password == data"username"] ->
                [retrun] -> [<end>]
            False[<choice>username in data] ->
            [calls the redirect function and pass though "/signin"] -> [<end>]
            
		[<choice>match using the path and splits it at the "?" and use the first part] ->
        	"/action_signup"[sets values to the output of the query function] ->
            [sets password to the output of password_hash function] ->
            [sets password_rentry to the output of password_hash function] ->
            
            [<choice>if a lot of conditions are meat] ->
            	True[call the redirect function and pass though "/signup"] ->
                [return] -> [<end>]
                
            [<choice>if a lot of conditions are meat] ->
            	False[opens the "data/passwords.json" file] ->
                [<choice>if username in data] ->
                	True[call the redirect function and pass though "/signup"] ->
                    [return] -> [<end>]
                    
            [<choice>if a lot of conditions are meat] ->
            	True[call set_cookie function] -> [<end>]
                	
		[<choice>match using the path and splits it at the "?" and use the first part] -> 
        	"/signup"[opens the "web/html/signup.html" file] ->
            [loads "web/html/signup.html"] -> [<end>]
        
        [<choice>match using the path and splits it at the "?" and use the first part] -> 
        	"/"[opens the "web/html/home.html" file] ->
            [loads "web/html/home.html"] -> 
            [sets cookie to the output of get_cookie] ->
            [checks if user has a data_file and has a data] ->
            [checks if the user has authorized] -> [<end>]
      
		[<choice>match using the path and splits it at the "?" and use the first part] -> 
        	"/signupqs"[opens the "web/html/signupquestions.html" file] ->
            [loads "web/html/signupquestions.html"] -> [<end>]
		
    
        
    ] -> [get_username function]
    [do_GET function] -> [redirect function]
    [do_GET function] -> [query function]
    [do_GET function] -> [password_hash]
]